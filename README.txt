# Matrix Transpose

This program tranposes matrices using work queue to dynamically allocate work for consumer. Host machine will produce all the work and does post-processing after all worker are done.

# Table Of Contents
- [Matrix Transpose](#matrix-transpose)
- [Table Of Contents](#table-of-contents)
- [General Flow](#general-flow)
- [Get Started](#get-started)
  - [Authentication](#authentication)
  - [Setup Code Base](#setup-code-base)
  - [Run The Program](#run-the-program)
  - [Caveats](#caveats)

# General Flow

![work-queue-flow-char](wq-flow.png)

# Get Started

## Authentication
Producer will invoke worker that lives in red machines using ssh. The best way to configure ssh authentication is to use identity file (ssh keys) and name alias using ssh config file.

Assuming you have already SSH-ed into a red machine, here is the setup instruction:

1. Generate ssh key, following the prompt on the screen. For now, I recommend using the default configs (press enter until we are back at the terminal). If you already have a key, great, move on to the next step.
```
ssh-keygen
```
2. Since all red machines shares the same file system, we can append the public key into the machine's `authorized_keys` to allow connections from the newly generated key.
```
cat ~/.ssh/id_rsa.pub >> authorized_keys
```
3. Setup config files. This will help consumer invoke ssh command with fewer arguments (consider it syntactic sugar). With your text editor of choice (nano, vim, emacs, etc.), populate the content of the `~/.ssh/config` file with the following. Take note of the `Host` name, we will need this when specifying `--worker-names` when invoking producer. I recommend following the default config of the producer: `4 workers, lab0, lab1, lab2, and lab3`. Replace <...> with custom values.
```
Host lab0 
    Hostname red<1-16>.cs.denison.edu 
    User <bid-red-id>
    IdentityFile ~/.ssh/id_rsa
Host lab1 
    Hostname red<1-16>.cs.denison.edu 
    User <bid-red-id>
    IdentityFile ~/.ssh/id_rsa
Host lab2 
    Hostname red<1-16>.cs.denison.edu 
    User <bid-red-id>
    IdentityFile ~/.ssh/id_rsa
Host lab3 
    Hostname red<1-16>.cs.denison.edu 
    User <bid-red-id>
    IdentityFile ~/.ssh/id_rsa
```
4. Test it out: `ssh lab0`, answer `yes` if you are asked to add the ECDSA key fingerprint (basically it is asking you if you trust this host, since it's your first time connecting).

## Setup Code Base

First and foremost, ssh into a machine.

Download the code by cloning the public repo and change directory into it:
```
git clone https://github.com/WilsonLe/wq
cd wq
```

Generate executables
```
make producer
make generate-input
make worker
```

Because all red machines shares the same file system, the `producer`, `worker`, and `generate_input` should all exist in all red machines.

## Run The Program

You should only be running the `producer` and `generate_input` executable. The `worker` executable should only be invoked by the `producer`.

First, we want to generate input for the program. You can write your own input, as long as it follows the format generated by `generate-input`: The first line is the matrix size (n), the next n lines are the matrix entries, comma separated with trailing comma. For testing purposes, use `./generate-input` to generate input matrixes with default size (128). For more details, use `./generate-input -h`.

Then, we want to run the producer. There are configs to running the producer that changing might cause seg faults (too little data being malloc-ed specified by `--max-mat-dim` or `--max-char-per-entry`), or ssh timeouts (too small `--block-size` or `--num-workers` so time between each ssh invoke is too small). If you generate default inputs, running the producer using default config will work fine: `./producer`. For detail usage, run `./producer -h`.

## Caveats
 
There will be some caveats running this program: if you are met with an ssh timeout error, chances are the worker threads are invoking ssh too frequent in a short amount of time, consider increasing block size relative to input matrix size, or increase number of worker (this requires setting up more ssh config).

As of the time of submission, there exist a race condition bug (that I have managed to narrow down to the work queue) that I have not managed to fix.